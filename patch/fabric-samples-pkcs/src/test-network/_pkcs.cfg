#REV 210713.00

# for fabric 2.3.2 / fabric-ca 1.5.0
# 

_PKCS_CFG_SCR=`realpath -s ${BASH_SOURCE}`
_PKCS_CFG_PATH=`dirname ${_PKCS_CFG_SCR}`
_PKCS_CFG_NAME=`basename ${_PKCS_CFG_PATH}`

_PKCS_DATA_PATH="${_PKCS_CFG_PATH}/_pkcs_data"

_PKCS_SLOT=0
_PKCS_SO_PIN=1234
_PKCS_PIN=98765432
_PKCS_TOKEN=ForFabric
_PKCS_LIB_PATH=/usr/local/lib/softhsm/libsofthsm2.so 
_PKCS_HASH=SHA2
_PKCS_SECURITY=256
_PKCS_IMMUTABLE=FALSE

_PKCS_SHSM_TOKEN_PATH="${_PKCS_CFG_PATH}/_pkcs_data/softhsm/tokens"
_PKCS_SHSM_CONF_FILE_PATH="${_PKCS_CFG_PATH}/_pkcs_data/softhsm/softhsm2.conf"

_PKCS_FAB_SAMP_VER=2.2.0
_PKCS_FAB_SAMP_OS=u20.04

_PKCS_FAB_SAMP_BIN=${_PKCS_CFG_PATH}/_pkcs_data/fabric/samples/${_PKCS_FAB_SAMP_VER}/bin-pkcs/${_PKCS_FAB_SAMP_OS}
_PKCS_FAB_SAMP_CORE_ORDERER_YAML_PATH=${_PKCS_CFG_PATH}/_pkcs_data/fabric/samples/${_PKCS_FAB_SAMP_VER}/config

_PKCS_FAB_SAMP_DK_COMPOSE_FILE_PATH=${_PKCS_CFG_PATH}/docker-compose-pkcs.yml

# debug, info
_PKCS_FAB_LOGGING=info


export SOFTHSM2_CONF="${_PKCS_SHSM_CONF_FILE_PATH}"

# could not assemble transaction, err proposal response was not successful, error code 500, 
# msg error starting container: error starting container: API error (404): 
# network fabric-samples_basic not found
#export COMPOSE_PROJECT_NAME="fabric-samples"

#
# library
#

function chk_numeric()
{
  local _val=$1  
  local _re='^[0-9]+$'

  if [ -z "${_val}" ]; then
    return 1
  fi

  if ! [[ "${_val}" =~ ${_re} ]] ; then
    return 1
  fi
  
  return 0
}

function chk_rst_exit()
{
  local _prev_exec_rst=$1
  local _err_msg=$2

  if [ "${_prev_exec_rst}" -ne 0 ]; then
    echo "[ERR] ${_err_msg}"
    exit 1
  fi
}

function chk_empty_exit()
{
  local _val_name=$1
  local _val_echo=$2

  local _r

  _r=$(eval "echo -n \$${_val_name}")

  if [ -z "${_r}" ]; then
    echo "[ERR] ${_val_name} is empty."
    exit 1
  fi

  if [ "${_val_echo}" == "1" ]; then
    echo "${_val_name}=${_r}"
  fi

  return 0
}

function check_etc_hosts
{
    local _domain=$1
    local _r
    
    _r=$(sed -n "/${_domain}/p" /etc/hosts)

    if [ -z "${_r}" ]; then
      echo "[ERR] can't find ${_domain}  at /etc/hosts"
      echo ""
      echo "execute below)"
      echo ""
      echo "sudo bash -c \"echo '127.0.0.1  ca.example.com ca.org1.example.com orderer.example.com peer0.org1.example.com' >> /etc/hosts\""
      echo ""
      exit 1
    fi

}

function fcas_check_user_id_exist
{
  local _fca_svr_url=$1
  local _fca_cli_cfg_path=$2
  local _fca_cli_msp_su_path=$3
  local _fca_id=$4

  local _r

  _r=$(fabric-ca-client identity list \
    -u "${_fca_svr_url}" \
    -H "${_fca_cli_cfg_path}" \
    -M "${_fca_cli_msp_su_path}" \
    --id "${_fca_id}" 2>&1)

  if [ $? -ne 0 ]; then
    
    _r=$(echo "${_r}" | grep "Error Code: 63 - Failed to get User")

    if [ $? -ne 0 ]; then
      echo "[ERR] failed to execute fabric-ca-client identity list"
      return 1
    fi

    return 0

  else

    _r=$(echo "${_r}" | grep "Name: ${_fca_id}")

    if ! [ -z "${_r}" ]; then
      # id is already registered
      return 2
    fi   

  fi

  return 1
}


function make_fabric_tls_dirs
{
  # orderers/orderers.example.com/tls
  local _base_path=$1

  if [ -z "${_base_path}" ]; then
    echo "[ERR] invalid param base_path, empty"
    return 1
  fi

  if ! [ -d "${_base_path}" ]; then
    mkdir -p "${_base_path}"

    if [ $? -ne 0 ]; then
      echo "[ERR] failed to create path, ${_base_path}"
      return 1
    fi
  fi

  # └── tls
  #   ├── IssuerPublicKey
  #   ├── IssuerRevocationPublicKey
  #   ├── ca.crt
  #   ├── cacerts
  #   ├── keystore
  #   │   └── d7bcc9d857...048_sk
  #   ├── server.crt
  #   ├── server.key
  #   ├── signcerts
  #   │   └── cert.pem
  #   ├── tlscacerts
  #   │   └── tls-localhost-9054-ca-orderer.pem
  #   └── user
  
   mkdir -p "${_base_path}/cacerts"
   mkdir -p "${_base_path}/keystore"
   mkdir -p "${_base_path}/signcerts"
   mkdir -p "${_base_path}/tlscacerts"

   return 0
}


function await_container_start
{
  local _cntr_name=$1
  local _err_on_exit=$2
  local _max_retry=$3
  local _auto_start=$4

  # running, exited, created, restarting, paused, removing
  #local _status=

  local cnt=1
  local is_running=0
  local cntr_id

  if [ -z "${_status}" ]; then
    _status=running
  fi

  if [ -z "${_max_retry}" ]; then
    _max_retry=10
  fi

  while [ ${is_running} -eq 0 -a ${cnt} -lt ${_max_retry} ]; do
    
    if [ "${_auto_start}" == "1" ]; then
      
      cntr_id=$(docker ps -aq -f status=created -f name=${_cntr_name})

      if [ "${cntr_id}" == "" ]; then
        cntr_id=$(docker ps -aq -f status=exited -f name=${_cntr_name})
      fi

      if [ "${cntr_id}" != "" ]; then
        docker start ${_cntr_name} &>/dev/null 2>&1
        sleep 1
      fi
      
    fi

    sleep 1

    # cntr_id=$(docker ps -aq -f status=exited -f name=${_cntr_name})

    # if [ $? -eq 0 ]; then
    #   if ! [ -z "${cntr_id}" ]; then
    #     echo "[ERR] container=${_cntr_name} is exited.. , ${cntr_id}"
    #     if [ "${_err_on_exit}" == 1 ]; then
    #       exit 1
    #     fi

    #     return 1
    #   fi
    # fi

    cntr_id=$(docker ps -aq -f status=running -f name=${_cntr_name})

    if [ $? -eq 0 ]; then
      if ! [ -z "${cntr_id}" ]; then
        #echo "${cntr_id}"
        return 0
      fi
    fi

    cnt=$(expr ${cnt} + 1)

    echo "[INFO] awaitng container=${_cntr_name} status is ${_status}.., count=${cnt}"

  done

  echo "[ERR] failed to await container=${_cntr_name}.."

  if [ "${_err_on_exit}" == 1 ]; then
    exit 1
  fi

  return 1
}


function util_get_first_file_name_in_path
{
  local _base_path=$1
  # cacerts , keystore, signcerts
  local _msp_sub=$2
  local _pattern=$3

  local _file_name
  local _dst_path="${_base_path}/${_msp_sub}"

  if ! [ -d "${_dst_path}" ]; then
    echo -n ""
    return 1
  fi

  if [ -z "${_pattern}" ]; then
    if [ "${_msp_sub}" == "keystore" ]; then
      _pattern="*_sk"
    else 
      _pattern="*.pem"
    fi
  fi

  _file_name=$(ls -1 ${_dst_path}/${_pattern})

  if [ $? -ne 0 ]; then
    echo -n ""
    return 1
  fi
  
  echo -n $(basename "${_file_name}")
  return 0
}


function await_svr_port
{
  local _svr_ip=$1
  local _svr_port=$2
  local _err_on_exit=$3
  local _max_retry=$4

  local _cnt=1
  local _is_port_valid=0
  local _r
  local _rno
  local _conn_timeout=5
  local _max_oper_time=5

  if [ -z "${_max_retry}" ]; then
    _max_retry=5
  fi

  # set -e causes bash termination when curl occurs error
  set +e

  while [ ${_is_port_valid} -eq 0 -a ${_cnt} -lt ${_max_retry} ]; do

    sleep 1
    #curl --connect-timeout ${_conn_timeout} -4 -m ${_max_oper_time} -s --no-keepalive --no-sessionid ${_svr_ip}:${_svr_port}
    #curl --silent -v ${_svr_ip}:${_svr_port} | /bin/bash -s >/dev/null 2>&1
    #_r=$( curl --silent -v ${_svr_ip}:${_svr_port} | /bin/bash -s >/dev/null 2>&1)
    #_r=$(curl --silent ${_svr_ip}:${_svr_port})
    _r=$(curl --connect-timeout ${_conn_timeout} -4 -m ${_max_oper_time} -s --no-keepalive --no-sessionid ${_svr_ip}:${_svr_port})
    _rno=$?

    if [ ${_rno} -eq 0 ]; then
      return 0
    fi

    # 1: unsupported protcol, this build of curl no support for this protocol
    if [ ${_rno} -eq 1 ]; then
      return 0
    fi

    # 55:failed sending network data
    # 56:failure in receiving network data
    #if [ ${_rno} -eq 55 ] || [ ${_rno} -eq 56]; then
    _cnt=$(expr ${_cnt} + 1)
    echo "[INFO] awaiting server port is connectable, ip=${_svr_ip},port=${_svr_port}, count=${_cnt}"
    #fi
    
  done

  echo "[ERR] failed to connect server port, ip=${_svr_ip},port=${_svr_port}, err=${_r}"

  if [ "${_err_on_exit}" == 1 ]; then
    exit 1
  fi

  return 1
}

function get_ski_from_ecprime256v1_pub_file
{
  local _pub_file_path=$1

  if ! [ -f "${_pub_file_path}" ]; then
    echo "[ERR] invalid param, pub_file_path"
    return 1
  fi

  local _tmp_pub=$(mktemp "/tmp/_tp.XXXXXXXXXXXXXXXX")

  # -offset 26 for ec prime256v1 public key 
  openssl asn1parse -offset 26 -noout -in "${_pub_file_path}" -out "${_tmp_pub}"

  if [ $? -ne 0 ]; then
    echo "[ERR] failed to parse public key.."
    rm -f "${_pub_file_path}"
    return 1
  fi

  echo -n $(openssl dgst -sha256 -r "${_tmp_pub}" | cut -d" " -f1) 
  rm -f "${_tmp_pub}" > /dev/null 2>&1

  return 0
}




#
# check
#

check_etc_hosts "ca.example.com"
check_etc_hosts "ca.org1.example.com"
check_etc_hosts "orderer.example.com"
check_etc_hosts "peer0.org1.example.com"

if [ -d "/var/lib/softhsm/" ]; then
  echo ""
  echo "[WARN] ************************************************************"
  echo "[ERR] please remove path '/var/lib/softhsm/' .."
  echo "[WARN] ************************************************************"
  echo ""
  #exit 1
fi



#
# trash
#

#_PKCS_ENABLE_=1
